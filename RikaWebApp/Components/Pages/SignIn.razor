@page "/signin"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject JwtAuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor



<div class="container">
    <div class="welcome-box">
        <h3 class="welcome-heading">Welcome!</h3>
        <h6 class="welcome-text">Please log in or sign up to continue</h6>
    </div>

    <EditForm FormName="signin" OnValidSubmit="SignInUserAsync" Model="@signInModel" class="form-box">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="signin-form">
            <label class="form-label">Email</label>
            <div class="input-group">
                <i class="fas fa-envelope input-icon"></i>
                <InputText @bind-Value="signInModel.Email" type="email" placeholder="Email" class="input-field" />
            </div>
            <span><ValidationMessage For="() => signInModel.Email" class="text-danger"></ValidationMessage></span>

            <label class="form-label">Password</label>
            <div class="input-group">
                <i class="fas fa-lock input-icon"></i>
                <InputText @bind-Value="signInModel.Password" type="password" placeholder="Password" class="input-field" />
            </div>
            <span><ValidationMessage For="() => signInModel.Password" class="text-danger"></ValidationMessage></span>

            <div class="checkbox">
                <input type="checkbox" />
                <label class="remember-me">Remember me</label>
            </div>
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <span class="alert alert-success">@successMessage</span>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <span class="alert alert-danger">@errorMessage</span>
            }
            <button class="btn primary-btn">Login</button>
        </div>
    </EditForm>

    <div class="sign-up-btn">
        <button @onclick="NavigateToSignUp" class="btn secondary-btn">Sign Up</button>
    </div>


    <div class="external-signin">
        <h6 class="or-divider">or</h6>
        <button class="btn external-btn"><i class="fab fa-facebook"></i> Continue With Facebook</button>
        <button class="btn external-btn"><i class="fab fa-google"></i> Continue With Google</button>
        <button class="btn external-btn"><i class="fab fa-apple"></i> Continue With Apple</button>
    </div>
</div>


@code {
    private SignInModel signInModel = new SignInModel();
    private string confirmPassword = string.Empty;
    private string? successMessage;
    private string? errorMessage;
    private string? jwtToken;

    public class TokenResponse
    {

        public string? Token { get; set; }
    }

    private async Task SignInUserAsync()
    {
        var response = await Http.PostAsJsonAsync("https://rika-authenticationprovider-drfta9bhdaf0g0dr.westeurope-01.azurewebsites.net/api/Auth/signin", signInModel);
        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            jwtToken = tokenResponse!.Token;

            if (!string.IsNullOrEmpty(jwtToken))
            {
                if (HttpContextAccessor.HttpContext != null)
                {
                    var cookieOptions = new CookieOptions
                        {
                            HttpOnly = true,
                            Secure = true,
                            Expires = DateTimeOffset.UtcNow.AddMinutes(30)
                        };
                    HttpContextAccessor.HttpContext.Response.Cookies.Append("Identity-token", jwtToken, cookieOptions);
                }
                await InvokeAsync(() =>
                    AuthenticationStateProvider.MarkUserAsAuthenticated(jwtToken));

                Navigation.NavigateTo("/");
            }
        }
        else
        {
            errorMessage = "Sign-in failed";
        }
    }


    private void NavigateToSignUp()
    {
        Navigation.NavigateTo("/signup"); 
    }


    public class SignInModel 
    {
        [Required]
        [Display(Name ="Email Address", Prompt ="Enter Your Email Address")]
        public string Email { get; set; } = null!;

        [Required]
        [Display(Name = "Password", Prompt = "Enter Your Password")]
        public string Password { get; set; } = null!;

        public bool RememberMe { get; set; }

    }




}
