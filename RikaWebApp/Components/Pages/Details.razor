@page "/details"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS



<PageTitle>Profile</PageTitle>


    <section id="settings-page">
   @*  @if(user == null)
    {
        <p class="error-message">@errorMessage</p>
    }
    else
    { *@
        
    

    <div class="container">

            <aside class="sidebar-settings">

                <div>
                    <h3>Settings</h3>
                </div>
                <nav class="profile-nav">

                    <div class="nav-settings-cards">
                        <a href="/" class="setting-card">
                            <div class="icon-settings">
                                <i class="fa-solid fa-globe"></i>
                            </div>
                            <p>Language</p><i class="fa-solid fa-arrow-right"></i>

                        </a>
                    </div>

                    <div class="nav-settings-slider">
                        <div class="setting-card">
                            <div class="icon-settings">
                                <i class="fa-regular fa-bell"></i>
                            </div>
                            <p>Notification</p>
                            <label class="switch">
                                <input type="checkbox" id="notification-toggle">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                    <div class="nav-settings-slider">
                        <div class="setting-card">
                            <div class="icon-settings">
                                <i class="fa-solid fa-moon"></i>
                            </div>
                            <p>Dark Mode</p>
                            <label class="switch">
                                <input type="checkbox" id="darkmode-toggle">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                    <div class="nav-settings-cards">
                        <a href="/" class="setting-card">
                            <div class="icon-settings">
                                <i class="fa-solid fa-question"></i>
                            </div>
                            <p>Help Center</p> <i class="fa-solid fa-arrow-right"></i>
                        </a>
                    </div>




                </nav>

            </aside>



        <EditForm style="margin-left:3%;" class="form-settings" Model="@input" method="post" novalidate>
                <h3>Personal Details</h3>
                <div class="Upload-image-settings">
                    <img src="avatar.svg" alt="" />


                </div>
                <div class="form-content-settings">
                    <DataAnnotationsValidator/>
                    <div id="form-name" class="input-group-settings">
                        <label for="name">Name</label>
                        <InputText @bind-Value="input.Name" id="name" name="name" placeholder="Ange ditt namn" />
                        <ValidationMessage For="@(() => input.Name)" />
                    </div>

                 <div id="form-gender" class="input-group-settings">
                    <label for="gender">Gender</label>
                    <div class="gender-group">
                        <InputRadioGroup @bind-Value="@input.Gender">
                            <InputRadio class="gender-box"  Value="male" /> Male
                            <InputRadio class="gender-box"  Value="female" /> Female
                        </InputRadioGroup>
                    </div>
                    <ValidationMessage For="@(() => input.Gender)" class="error-message" id="error-gender"></ValidationMessage>
                </div> 

                    <div id="form-age" class="input-group-settings">
                        <label for="age">Age</label>
                        <InputNumber @bind-Value="input.Age" id="age" name="age" placeholder="Ange din ålder"  />
                        <ValidationMessage For="@(() => input.Age)"  class="error-message" id="error-age"></ValidationMessage>
                    </div>

                    <div id="form-email" class="input-group-settings">
                        <label for="email">Email</label>
                        <InputText @bind-Value="input.Email" type="email" id="email" name="email" placeholder="Ange din email" required />
                        <ValidationMessage For="@(() => input.Email)" class="error-message" id="error-email"></ValidationMessage>
                    </div>

                    <div class="form-button-profile">
                        <button type="submit" class="form-btn"> Save Changes</button>
                        <a class="sign-out-btn" href="/">Log Out <i class="fa-solid fa-right-from-bracket"></i></a>
                    </div>



                </div>
            </EditForm>



        </div>
  @*   } *@
    </section>


@code {
    private UserInputModel input = new UserInputModel();
    private string errorMessage = "";
    private bool isSaved = false;
    private UserDto? user;

    private class UserInputModel
    {
        public string? Name { get; set; }
        public string? Gender { get; set; }
        public int? Age { get; set; }
        public string? Email { get; set; }
    }
    private class UserDto
    {
        public string Id { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public bool IsAdmin { get; set; }
        public string? ProfilePictureUrl { get; set; }
        public string? ProfileDescription { get; set; }
        public string? Gender { get; set; }
        public int? Age { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Hämta JWT-token från `localStorage`
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Authentication token is missing. Please log in.";
                return;
            }

            // Sätt `Authorization`-header med JWT-token
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Hämta användardata från API:et
            user = await Http.GetFromJsonAsync<UserDto>($"https://rika-authenticationprovider-drfta9bhdaf0g0dr.westeurope-01.azurewebsites.net/api/User/getself");

            if (user == null)
            {
                errorMessage = "User data could not be loaded.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
        }
    }

    

    public class ChooseGender
    {
        public enum UserGender { male, female }
    }

    public class Male
    {
        public string? male { get; set; }
    }
    public class Female
    {
        public string? female { get; set; }
    }
    public Male? male { get; set; }
    public Female? female { get; set; }
}
