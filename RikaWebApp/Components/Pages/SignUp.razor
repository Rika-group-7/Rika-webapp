@page "/signup"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject HttpClient Http
@rendermode InteractiveServer
@inject NavigationManager Navigation


<div class="container">
    <div class="new-account-box">
        <h3 class="signup-heading">Sign Up</h3>
        <h6 class="text">Create a new account</h6>
    </div>

    <EditForm FormName="signup" Model="@signUpModel" OnValidSubmit="RegisterUserAsync" class="form-box">
        <DataAnnotationsValidator />
        <div class="signup-form">
            <label class="form-label">User Name</label>
            <InputText @bind-Value="signUpModel.UserName" type="text" class="form-input" placeholder="User Name" />
            <span>
                <ValidationMessage For="() => signUpModel.UserName" class="text-danger" />
            </span>

            <label class="form-label">Email</label>
            <InputText @bind-Value="signUpModel.Email" type="email" placeholder="Email" />
            <span>
                <ValidationMessage For="() => signUpModel.Email" class="text-danger" />
            </span>

            <label class="form-label">Password</label>
            <InputText @bind-Value="signUpModel.Password" type="password" placeholder="******" />
            <span>
                <ValidationMessage For="() => signUpModel.Password" class="text-danger" />
            </span>

            <label class="form-label">Confirm Password</label>
            <InputText @bind-Value="confirmPassword" type="password" placeholder="******" />
            <span>
                <ValidationMessage For="() => confirmPassword" class="text-danger" />
            </span>

            <div class="checkbox">
                <InputCheckbox @bind-Value="signUpModel.Terms" type="checkbox" />
                <label class="Terms">By creating an account you have to agree with our terms & conditions.</label>
                <ValidationMessage For="() => signUpModel.Terms" class="text-danger" />
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <span class="alert alert-success">@successMessage</span>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <span class="alert alert-danger">@errorMessage</span>
            }

            <button class="btn" type="submit">Sign up</button>
        </div>

    </EditForm>

</div>

@code {
    private SignUpModel signUpModel = new SignUpModel();
    private string confirmPassword = string.Empty;
    private string? successMessage;
    private string? errorMessage;

    private async Task RegisterUserAsync()
    {
        if (signUpModel.Password != confirmPassword)
        {
            errorMessage = "Password does not match.";
            successMessage = null!;
            return;
        }

        var response = await Http.PostAsJsonAsync("https://rika-authenticationprovider-drfta9bhdaf0g0dr.westeurope-01.azurewebsites.net/api/Auth/signup", signUpModel);
        if (response.IsSuccessStatusCode)
        {
            var responseData = await response.Content.ReadFromJsonAsync<RegisterResponse>();
            if (responseData != null && !string.IsNullOrEmpty(responseData.UserId))
            {
                successMessage = "Registration successful. Redirecting to confirmation page...";
                Navigation.NavigateTo($"/confirmaccount?userId={responseData.UserId}");
            }
            else
            {
                errorMessage = "Failed to retrieve User ID.";
            }
        }
        else
        {
            errorMessage = "Was not able to create account.";
        }
    }

    public class SignUpModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [DataType(DataType.Text, ErrorMessage = "Invalid user name.")]
        public string UserName { get; set; } = null!;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = null!;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long.")]
        [RegularExpression(@"^(?=.*\d)(?=.*[A-Z])(?=.*\W).{8,}$", ErrorMessage = "Password not correct")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = null!;

        [Required(ErrorMessage = "You must agree to the terms.")]
        public bool Terms { get; set; } 
    }

    public class RegisterResponse
    {
        public string UserId { get; set; } = null!;
    }

}